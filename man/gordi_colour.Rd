% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gordi_colour.R
\name{gordi_colour}
\alias{gordi_colour}
\title{Set colour/fill scales for gordi plots}
\usage{
gordi_colour(
  pass,
  scale = c("continuous", "discrete", "auto", "binned"),
  family = c("viridis", "brewer", "gradient", "steps", "manual", "default"),
  fill = FALSE,
  breaks = waiver(),
  name = waiver(),
  labels = waiver(),
  limits = NULL,
  na.value = "grey50",
  guide = waiver(),
  trans = "identity",
  values = NULL,
  option = NULL,
  direction = 1,
  begin = 0,
  end = 1,
  alpha = 1,
  low = NULL,
  mid = NULL,
  high = NULL,
  midpoint = NULL,
  palette_name = NULL,
  type = NULL,
  bins = NULL,
  n.breaks = NULL
)
}
\arguments{
\item{pass}{A list object produced by [gordi_read()]}

\item{scale}{Character; One of the `c('continuous', 'discrete','auto', 'binned')`.
Character.}

\item{family}{Character; One of the palette families `c('viridis', 'brewer', 'gradient', 'steps', 'manual', 'default')`.
Character.}

\item{fill}{Logical; If fill = FALSE operates on colour scale, if fill = TRUE operates on fill scale.
Default is FALSE.}

\item{breaks}{Scale breaks. See `scale_colour_...` or `scale_fill_...`.}

\item{name}{Scale name. See `scale_colour_...` or `scale_fill_...`.}

\item{labels}{Labels for scale. See `scale_colour_...` or `scale_fill_...`.}

\item{limits}{Scale limits. See `scale_colour_...` or `scale_fill_...`.}

\item{na.value}{Colour used for NA values.}

\item{guide}{Guide for the scale. See `scale_colour_...` or `scale_fill_...`.}

\item{trans}{Transformation for the scale. See `scale_colour_...` or `scale_fill_...`.}

\item{values}{Vector of colours for `manual` discrete scale, and for continuous gradientn and stepsn variants.}

\item{option, }{direction, begin, end, alpha  Options for `viridis` scales.}

\item{low, }{mid, midpoint, high Colours for `gradient`/`gradient2` or `steps`/`steps2` scales.}

\item{palette_name}{Arguments for `brewer` scales.}

\item{bins, }{n.breaks Arguments for `binned`/`steps` scales.}
}
\value{
The updated `pass` object with label layers added to `pass$plot`. Followed by a fresh `ggnewscale` for the same aesthetic (colour or fill).
}
\description{
Adds a colour or fill scale to the current ggplot plot stored in `pass$plot` (created by gordi_*() functions). 
After applying the colour scale, it starts a new independent scale using `ggnewscale`, 
so later layers can have their own scale without any interference.
}
\details{
use fill = FALSE to modify colour scales (default) and fill = TRUE to modify the fill scales
Compulsory arguments:
- `scale` selects the scale type: `continuous`, `discrete`, `binned` or `auto`. 
With `scale = 'auto'`, the function chooses scale `discrete` when `values` are specified (e.g. manual palette), 
otherwise `continuous`.
- `family` selects the scale family within the scale type:
for scale `discrete` -> `'manual'`, `'viridis'`, `'brewer'`, `'default'`
for scale `continuous` ->  `'viridis'`, `'gradient'`, `'steps'`, `'brewer'`, `'default'`
for scale `binned` -> `'viridis'`, `'brewer'`, `'steps'`, `'default'`
For `scale = 'discrete'`, `family = 'manual'` you must provide `values` (vector of colours)
Argument `na.values` sets colours for NA values in the dataset.
After adding a certain scale, the function set a new colour/fill scale with `ggnewscale`, so subsequent layers can use a fresh scale.

Call [gordi_colour()] right after you have added a layer that maps colour/fill (e.g. `gordi_species(colour = ...)`, `gordi_sites(fill = ...)`).
If no layer uses colour/fill aesthetic, this function has no effect.
}
\examples{
# discrete species colours with a brewer palette
gordi_read(m, env, traits) |>
  gordi_species(colour = 'form') |>
  gordi_colour(scale = 'discrete', family = 'brewer', palette_name = 'Set2')

# continuous viridis fill for sites
gordi_read(m, env) |>
  gordi_sites(fill = 'elevation') |>
  gordi_colour(fill = TRUE, scale = 'continuous', family = 'viridis')
}
